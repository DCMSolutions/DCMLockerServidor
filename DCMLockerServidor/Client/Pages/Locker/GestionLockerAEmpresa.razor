@page "/GestionLockerAEmpresa/{id:int}"
@using DCMLockerServidor.Shared
@attribute [Authorize]

<div style="display: flex; justify-content: right;">
    <button type="button" @onclick="BotonAtras" class="btn btn-outline-info" title="Volver"><FeatherArrowLeft Color="blue" /></button>
</div>

@if (empresa != null)
{
    <h1>Gestionar lockers de @empresa.Nombre</h1>
    <br />
    <label><strong>Lockers de la empresa</strong></label>
    <div class="tablacontent" style="position:relative;">
        <RadzenDataGrid AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="8"
                    AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay lockers asignados a esta empresa aún."
                    Data="@listaLockersEmpresa" TItem="string" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
            <Columns>
                <RadzenDataGridColumn TItem="string" Title="Número de serie">
                    <Template Context="data">
                        <p>@data</p>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="string" Title="Desasignar">
                    <Template Context="data">
                        <button class="btn" title="Desasignar locker" @onclick="() => alertaDesasignar(data)"><FeatherTrash2 Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

    <br />

    <label><strong>Lockers no asignados</strong></label>
    <br />
    <RadzenDropDown @bind-Value=@lockerParaAgregar Data=@listaLockersLibres TValue="string" />
    <br />
    <br />
    <button type="submit" class="btn btn-primary btn-user btn-block" @onclick="(() => asignarLocker())">Asignar</button>
}
else
{
    <a>Cargando...</a>
}

@code {
    [Parameter]
    public int id { get; set; }
    Empresa empresa;
    List<string>? listaLockersEmpresa;
    List<string>? listaLockersLibres;
    string? lockerParaAgregar;

    protected override async Task OnInitializedAsync()
    {
        empresa = await config.GetEmpresaPorId(id);
        listaLockersEmpresa = await config.GetLockersDeEmpresaPorId(id);
        listaLockersLibres = await config.GetLockersSinAsignar();
    }

    void BotonAtras()
    {
        nav.NavigateTo("/empresas");
    }

    public async Task alertaDesasignar(string locker)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Desasignará el locker {locker} de la empresa {empresa.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await desasignarLocker(locker);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task desasignarLocker(string locker)
    {
        var rta = await config.DeleteLockerConIdEmpresa(locker, id);
        if (rta)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Éxito", Detail = "El locker fue desasignado de esta empresa.", Duration = 4000 });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo borrar el locker.", Duration = 4000 });

        }
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task asignarLocker()
    {

        if (lockerParaAgregar != null)
        {
            var rta = await config.AddLockerAId(lockerParaAgregar, id);
            if (rta)
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Éxito", Detail = "El locker fue asignado a esta empresa.", Duration = 4000 });
                lockerParaAgregar = null;
            }
            else
            {
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo asignar el locker.", Duration = 4000 });
            }
            await OnInitializedAsync();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("es null");
        }
    }


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
