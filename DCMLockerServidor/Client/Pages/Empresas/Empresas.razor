@page "/empresas"
@using DCMLockerServidor.Shared
@attribute [Authorize]

<h1><strong>Empresas</strong></h1>
<br />
<label>Configuración de empresas.</label>
<br />
<hr />
<br />
<div style="display: flex; justify-content: space-between; ">

    <button type="button" class="btn btn-primary btn-user btn-block" @onclick="() => gotoAddEmpresa(0)">Agregar</button>
    <button type="button" @onclick="() => changeVerTokens()">
        @if (verTokens)
        {
            <FeatherEye Color="black" />
        }
        else
        {
            <FeatherEyeOff Color="black" />
        }
    </button>
</div>
<br />


@if (listaDeEmpresas != null && listaDeEmpresas.Count > 0)
{
    <div class="tablacontent" style="position:relative;">
        <RadzenDataGrid AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="8"
                        AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay empresas cargadas."
                        Data="@listaDeEmpresas" TItem="Empresa" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center"
                        ExpandMode="DataGridExpandMode.Single">
            <Template Context="empresa">
                <RadzenDataGrid AllowColumnResize="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="8" AllowFiltering="false"
                                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" EmptyText="No hay urls cargadas." Density="Density.Compact"
                                Data="@empresa.Urls" TItem="EmpresaUrl" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="EmpresaUrl" Property="Url" Title="URL" />
                        <RadzenDataGridColumn TItem="EmpresaUrl" Title="">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDeleteUrl(data)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>

            <Columns>
                <RadzenDataGridColumn TItem="Empresa" Property="Nombre" Title="Nombre" />
                <RadzenDataGridColumn TItem="Empresa" Property="TokenEmpresa" Title="Token">
                    <Template Context="data">
                        @if (verTokens)
                        {
                            <div>@data.TokenEmpresa</div>
                        }
                        else
                        {
                            <div>********</div>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Empresa" Property="Active" Title="Estado">
                    <Template Context="data">
                        @if (data.Active == 1)
                        {
                            <div>Activa</div>
                        }
                        else
                        {
                            <div>Inactiva</div>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Empresa" Width="7%">
                    <Template Context="data">
                        <button class="btn" title="Agregar url" @onclick="()=>AgregarUrl(data.Id)"><FeatherPlusCircle Color="blue" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Empresa" Width="7%">
                    <Template Context="data">
                        <button class="btn" title="Editar empresa" @onclick="() => editEmpresa(data.Id)"><FeatherEdit Color="green" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Empresa" Width="7%">
                    <Template Context="data">
                        <button class="btn" title="Regenerar token" @onclick="() => recargarToken(data.Id)"><FeatherRefreshCw Color="black" /></button>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Empresa" Width="7%">
                    <Template Context="data">
                        <button class="btn" title="Eliminar empresa" @onclick="() => alertaDelete(data)"><FeatherTrash2 Color="red" /></button>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>
    </div>
}

<br />

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    List<Empresa> listaDeEmpresas;
    bool verTokens = false;

    protected override async Task OnInitializedAsync()
    {
        listaDeEmpresas = await config.GetListaDeEmpresas();
    }

    public async void recargarToken(int idEmpresa)
    {
        await config.RegenerarToken(idEmpresa);
        await OnInitializedAsync();
        StateHasChanged();
    }

    public void editEmpresa(int id)
    {
        nav.NavigateTo($"/AddEmpresa/{id}");
    }

    public void gestionarURLs(int id)
    {
        nav.NavigateTo($"/GestionUrlsEmpresa/{id}");
    }

    public async Task alertaDelete(Empresa empresa)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Eliminará la empresa {empresa.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deleteEmpresa(empresa);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaDeleteUrl(EmpresaUrl empresaUrl)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Eliminará el url {empresaUrl.Url}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deleteEmpresaUrl(empresaUrl);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task deleteEmpresa(Empresa empresa)
    {
        var rta = await config.DeleteEmpresa(empresa.Id);
        if (rta)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Éxito", Detail = "La empresa fue borrada con éxito.", Duration = 1500 });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo borrar la empresa.", Duration = 4000 });

        }
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task deleteEmpresaUrl(EmpresaUrl empresaUrl)
    {
        var rta = await config.DeleteEmpresaUrl(empresaUrl.Id);
        if (rta)
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Éxito", Detail = "El url fue borrado con éxito.", Duration = 1500 });
        }
        else
        {
            ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "No se pudo borrar el url.", Duration = 4000 });

        }
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task AgregarUrl(int idEmpresa)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddUrl.idEmpresa), idEmpresa);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large,
                HideHeader = true
            };

        var formModal = Modal.Show<AddUrl>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await OnInitializedAsync();

        }
        else
        {
            await OnInitializedAsync();
        }
    }

    void changeVerTokens()
    {
        verTokens = !verTokens;
    }

    void gotoAddEmpresa(int id)
    {
        nav.NavigateTo($"/AddEmpresa/{id}");
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
